{
  "version": 3,
  "sources": ["../../src/Index.generated.ts", "../../src/ui/Building.ts", "../../src/ui/MapBuilder.ts", "../../src/ui/MapAction.ts", "../../src/ui/MapPanel.ts", "../../src/Index.ts", "../../src/Loading.generated.ts", "../../src/Loading.ts", "../../src/draft/MapUi.generated.ts", "../../src/draft/MapUi.ts"],
  "sourcesContent": ["/**This class is automatically generated by LayaAirIDE, please do not make any modifications. */\n\n\n/**\n * scenes/Index.ls\n */\nexport class IndexBase extends Laya.Scene {\n}\n\n", "import Texture = Laya.Texture;\nconst { regClass, property } = Laya;\n\n\n@regClass('4016e768-c3f6-4fd0-bb72-88410b2e9935', '../src/ui/Building.ts')\nexport class Building extends Laya.Sprite {\n    constructor() {\n        super();\n        this.width = 40;\n        this.height = 40;\n        const houseTexture: Texture = Texture.create(Laya.loader.getRes(\"resources/map/house.png\"), 0, 0, 280, 280);\n        this.graphics.drawTexture(houseTexture, 0, 0, this.width, this.height);\n    }\n}", "const RANDOM_CONFIG = {\n    DEEP_MIN: 8,\n    DEEP_MAX: 12,\n    EACH_DEEP_POINT_MIN: 1,\n    EACH_DEEP_POINT_MAX: 4,\n    POINT_ROAD_MIN: 1,\n    POINT_ROAD_MAX: 4,\n    ROAD_PRICE_MIN: 10,\n    ROAD_PRICE_MAX: 20,\n    EVENT_VALUE_MIN: 1,\n    EVENT_VALUE_MAX: 5,\n    EVENT_ROAD_MIN: 1,\n    EVENT_ROAD_MAX: 3,\n};\n\nconst PERCENT_CONFIG = {\n    EVENT: {\n        TOTAL: 10000,\n        TOTAL_PRICE_CHANGE: 5000,\n        ROAD_PRICE_CHANGE: 8999,\n        POSITION_CHANGE: 9999,\n        GAME_FAILED: 1,\n    },\n    EVENT_ROAD_PRICE: {\n        TOTAL: 10,\n        FREE: 2,\n    },\n};\n\nexport function createRandom(min: number, max: number) {\n    let rander = max - min + 1;\n    return Math.floor(Math.random() * rander) + min;\n}\n\nexport function mapBuilder() {\n    let roadNumber = 0,\n        deepNumber = createRandom(RANDOM_CONFIG.DEEP_MIN, RANDOM_CONFIG.DEEP_MAX);\n\n    let point: Array<number[]> = [[0]],\n        pointNumber = 1;\n    let map: Record<number, Record<number, any>> = {};\n    let mapV: Record<number, any> = [],\n        pointEvent: Record<number, any> = [],\n        topology: Record<number, any> = {},\n        mapLength = 0;\n    let maxCause = 0,\n        maxPath: number[] = [],\n        minCause = 0,\n        minPath: number[] = [];\n\n    //create point with deep number\n    function createPoint() {\n        for (let i = 0; i < deepNumber; i++) {\n            let random = createRandom(\n                i == 0\n                    ? RANDOM_CONFIG.EACH_DEEP_POINT_MAX - 2\n                    : RANDOM_CONFIG.EACH_DEEP_POINT_MIN,\n                RANDOM_CONFIG.EACH_DEEP_POINT_MAX\n            );\n            let r = [];\n            for (let j = 0; j < random; j++) {\n                pointNumber++;\n                r[j] = pointNumber - 1;\n            }\n            point.push([...r]);\n        }\n        pointNumber++;\n        point.push([pointNumber]);\n        deepNumber = point.length;\n    }\n    function createMap() {\n        for (let i = 0; i < deepNumber - 1; i++) {\n            for (let j = 0; j < point[i].length; j++) {\n                let start = point[i][j];\n                map[start] = {};\n                let limit = point[i + 1].length;\n                let limitArr = [...point[i + 1]];\n                if (i + 2 != deepNumber) {\n                    limit += point[i + 2].length;\n                    limitArr = [...limitArr, ...point[i + 2]];\n                }\n                let road = createRandom(\n                    RANDOM_CONFIG.POINT_ROAD_MIN,\n                    Math.min(limit - 1, RANDOM_CONFIG.POINT_ROAD_MAX)\n                );\n                for (var t = 0; t < road; t++) {\n                    var end = Math.floor(Math.random() * (limitArr.length - t));\n                    map[start][limitArr[end]] = createRandom(\n                        RANDOM_CONFIG.ROAD_PRICE_MIN,\n                        RANDOM_CONFIG.ROAD_PRICE_MAX\n                    );\n                    if (!topology[limitArr[end]]) topology[limitArr[end]] = 0;\n                    topology[limitArr[end]]++;\n                    mapV[mapLength] = {\n                        x: start,\n                        y: limitArr[end],\n                        z: map[start][limitArr[end]],\n                    };\n                    mapLength++;\n                    limitArr[end] = limitArr[limitArr.length - t - 1];\n                }\n            }\n        }\n        for (let i = 1; i < deepNumber - 1; i++) {\n            for (let j = 0; j < point[i].length; j++) {\n                if (!topology[point[i][j]]) {\n                    let limitArr = [...point[i - 1]];\n                    var start = Math.floor(Math.random() * (limitArr.length - t));\n                    let startP = limitArr[start];\n                    topology[point[i][j]]++;\n                    map[startP][point[i][j]] = createRandom(\n                        RANDOM_CONFIG.ROAD_PRICE_MIN,\n                        RANDOM_CONFIG.ROAD_PRICE_MAX\n                    );\n                    mapV[mapLength] = {\n                        x: startP,\n                        y: point[i][j],\n                        z: map[startP][point[i][j]],\n                    };\n                    mapLength++;\n                }\n            }\n        }\n    }\n    function createEvent() {\n        pointEvent[0] = {};\n        pointEvent[pointNumber - 1] = {};\n        for (let i = 1; i < pointNumber - 1; i++) {\n            let pecent = createRandom(1, PERCENT_CONFIG.EVENT.TOTAL);\n            let type =\n                pecent <= PERCENT_CONFIG.EVENT.TOTAL_PRICE_CHANGE\n                    ? 0\n                    : pecent <= PERCENT_CONFIG.EVENT.ROAD_PRICE_CHANGE\n                        ? 1\n                        : pecent <= PERCENT_CONFIG.EVENT.POSITION_CHANGE\n                            ? 2\n                            : 3;\n            if (type == 3) {\n                pointEvent[i] = { type: 3 };\n                continue;\n            }\n            if (type == 2) {\n                let target = createRandom(2, pointNumber - 1);\n                while (target == i) {\n                    target = createRandom(2, pointNumber - 1);\n                }\n                pointEvent[i] = { type: 2, target };\n                continue;\n            }\n            let event = createRandom(0, 1);\n            if (event == 0) {\n                let value = createRandom(\n                    RANDOM_CONFIG.EVENT_VALUE_MIN,\n                    RANDOM_CONFIG.EVENT_VALUE_MAX\n                );\n                pointEvent[i] = { type: 0, value: type == 0 ? value : value * -1 };\n            } else {\n                let value = createRandom(\n                    RANDOM_CONFIG.EVENT_VALUE_MIN,\n                    RANDOM_CONFIG.EVENT_VALUE_MAX\n                );\n                let path = createRandom(\n                    RANDOM_CONFIG.EVENT_ROAD_MIN,\n                    RANDOM_CONFIG.EVENT_ROAD_MAX\n                );\n                let isFree = createRandom(1, PERCENT_CONFIG.EVENT_ROAD_PRICE.TOTAL);\n                pointEvent[i] = {\n                    type: 1,\n                    value:\n                        isFree <= PERCENT_CONFIG.EVENT_ROAD_PRICE.FREE\n                            ? 0\n                            : type == 0\n                                ? value\n                                : value * -1,\n                    path,\n                };\n            }\n        }\n    }\n    let resultRecord = [];\n    function dps(pos: any, road: any[], value: number, event: any[]) {\n        let value_ = 0;\n        let newEvent = [];\n        if (pos == pointNumber) {\n            resultRecord.push({ value, road });\n            if (minCause == 0 || minCause > value) {\n                minCause = value;\n                minPath = [...road];\n            }\n            if (maxCause < value) {\n                maxCause = value;\n                maxPath = [...road];\n            }\n            return;\n        }\n        if (pointEvent[pos].type == 3) {\n            return;\n        }\n        if (pointEvent[pos].type == 2) {\n            if (!road.includes(pos)) {\n                dps(\n                    pointEvent[pos].target,\n                    [...road, pointEvent[pos].target],\n                    value,\n                    event\n                );\n                return;\n            }\n        }\n        if (pointEvent[pos].type == 1) {\n            newEvent = pointEvent[pos];\n        }\n        if (pointEvent[pos].type == 0) {\n            value_ = pointEvent[pos].value;\n        }\n        let paths = map[pos];\n        for (let target in paths) {\n            let v = paths[target];\n            if (event.length != 0) {\n                for (let i = 0; i < event.length; i++) {\n                    let e = event[i];\n                    if (e.value == 0) {\n                        v = 0;\n                    } else {\n                        v += e.value;\n                    }\n                    if (e.path == 0) {\n                        event.splice(i, 1);\n                        i--;\n                    }\n                }\n            }\n            dps(target, [...road, target], value + v + value_, [...event, newEvent]);\n        }\n    }\n    function calculateValue() {\n        let st = 0;\n        let road = [0];\n        let value = 0;\n        dps(st, road, value, []);\n    }\n\n    createPoint();\n    createMap();\n    createEvent();\n\n    // console.log(`\u8282\u70B9\u6570\u91CF:`, pointNumber);\n    // console.log(`\u6DF1\u5EA6:`, deepNumber);\n    // console.log(`\u8282\u70B9\u6DF1\u5EA6\u56FE:`, point);\n    // console.log(`\u5730\u56FE:`, map);\n    // console.log(`\u8282\u70B9\u4E8B\u4EF6:`, pointEvent);\n    // console.log(\n    //     \"\u4E8B\u4EF6\u8BF4\u660E:\\n type:0 \u4E3A\u83B7\u5F97\u6216\u5931\u53BB\u90E8\u5206\u70B9\u6570 value \u4E3A\u70B9\u6570\u7684\u5177\u4F53\u6570\u503C \\n type:1 \u4E3A\u63A5\u4E0B\u6765n\u6761\u8DEF,\u8D39\u7528\u589E\u52A0\u6216\u8005\u51CF\u5C11 value \u4E3A\u70B9\u6570\u7684\u5177\u4F53\u6570\u503C,\u5982\u679C\u4E3A0,\u5219\u4EE3\u8868\u63A5\u4E0B\u6765\u7684n\u6761\u8DEF\u514D\u8D39 path \u4E3A\u5BF9\u5E94\u7684n\u6761\u8DEF \\n type:2 \u4ECE\u5F53\u524D\u70B9\u79FB\u52A8\u5230\u522B\u5904 target\u4E3A\u79FB\u52A8\u7684\u76EE\u7684\u5730 \\n type:3 \u6E38\u620F\u5931\u8D25\"\n    // );\n\n    calculateValue();\n    const defaultValue = Math.round(minCause + (maxCause - minCause) * 0.3);\n\n    // console.log(`\u6700\u5C11\u8D39\u7528:`, minCause);\n    // console.log(`\u6700\u77ED\u8DEF\u5F84:`, minPath);\n    // console.log(`\u6700\u591A\u8D39\u7528:`, maxCause);\n    // console.log(`\u6700\u957F\u8DEF\u5F84:`, maxPath);\n    // console.log(`\u521D\u59CB\u8D39\u7528:`, defaultValue);\n    return { map, defaultValue, point, pointEvent, endPoint: pointNumber };\n}\n//   mapBuilder();\n", "import { mapBuilder } from \"./MapBuilder\";\n\nexport default class MapAction {\n    position = 0;\n    lastPoint = 0;\n    map: Record<number, Record<number, any>> = {};\n    pointEvent: Record<number, any> = [];\n    eventList: Array<any> = [];\n    eventFlag = {};\n    point: Array<number[]> = [];\n    endPoint = 0;\n    isFinish = false;\n    constructor() {\n        const { map, defaultValue, point, pointEvent, endPoint } = mapBuilder();\n        this.lastPoint = defaultValue;\n        this.map = map;\n        this.point = point;\n        this.pointEvent = pointEvent;\n        this.endPoint = endPoint;\n        this.showRoad(this.position);\n    }\n    showRoad = (position: number) => {\n        const roadList: Record<number, any> = this.map[position];\n        console.log('showRoad', position, roadList);\n    }\n    meetEvent = (position: number) => {\n        let event = this.pointEvent[position];\n\n        console.log('event', position, event);\n        if (event.type == 1) {\n            this.eventList.push(event);\n        }\n        if (event.type == 0) {\n            this.lastPoint += event.value;\n        }\n        if (event.type == 2) {\n            this.positionChange(event.target);\n        }\n    }\n    positionChange = (newPosition: number) => {\n        let value = this.map[this.position][newPosition];\n        for (let i = 0; i < this.eventList.length; i++) {\n            let event = this.eventList[i];\n            if (event.value == 0) {\n                value = 0;\n            } else {\n                value += event.value;\n            }\n            if (event.path === 0) {\n                this.eventList.splice(i, 1);\n                i--;\n            }\n        }\n        this.lastPoint -= value;\n        console.log('\u5269\u4F59\u70B9\u6570', this.lastPoint);\n\n        if (this.lastPoint <= 0) {\n            console.log('\u6E38\u620F\u7ED3\u675F\uFF0C\u65C5\u9014\u5931\u8D25');\n            this.isFinish = true;\n            return;\n        }\n        this.position = newPosition;\n\n        if (this.position == this.endPoint) {\n            console.log('\u6E38\u620F\u7ED3\u675F\uFF0C\u987A\u5229\u901A\u5173');\n            this.isFinish = true;\n            return;\n        }\n\n        this.meetEvent(this.position);\n        this.showRoad(this.position);\n\n    }\n\n}", "import { Building } from \"./Building\";\nimport Texture = Laya.Texture;\nimport MapAction from \"./MapAction\";\nconst { regClass, property } = Laya;\n\ninterface IPos {\n    x: number;\n    y: number;\n}\ninterface IRoadPoint extends IPos {\n    turn?: number; // \u7B2C\u51E0\u4E2A\u62D0\u5F2F\n    isTurn?: boolean; // \u5F53\u524D\u662F\u5426\u4E3A\u62D0\u5F2F\n    value?: number; // \u8DDD\u79BBstart\u548C\u8DDD\u79BBend\u76F8\u52A0\u7684\u6743\u91CD\uFF0C\u8D8A\u5C0F\u8D8A\u6B63\u786E\n}\ninterface IRoad {\n    cost: number;\n    points: IRoadPoint[];\n}\ninterface IBuilding extends IPos {\n    id: number;\n    sprite?: Building;\n    targets?: Record<number, IRoad>;\n}\ntype IMapPoint = IBuilding;\n\n@regClass('8e8acd19-9514-4a59-b19e-ea56fed60c71', '../src/ui/MapPanel.ts')\nexport class MapPanel extends Laya.Panel {\n    // \u7F51\u683C\u5217\u6570\n    private gridColumns: number = 0;\n    // \u7F51\u683C\u884C\u6570\n    private gridRows: number = 0;\n    // \u7F51\u683C\u5217\u5BBD\n    private gridColumnWidth: number = 40;\n    // \u7F51\u683C\u884C\u9AD8\n    private gridRowHeight: number = 40;\n    // \u5730\u56FE\u6570\u636E\n    public map: IMapPoint[][] = [];\n    // \u5EFA\u7B51\u7269\u6570\u636E\n    public buildingMapper: Record<number | string, IMapPoint> = {};\n    // \u539F\u59CB\u5730\u56FE\u6570\u636E\n    public mapInfo: MapAction = null;\n    // sprite\n    private roadSprite: Laya.Sprite = new Laya.Sprite();\n    private highLightRoadSprite: Laya.Sprite = new Laya.Sprite();\n    private buildingSprite: Laya.Sprite = new Laya.Sprite();\n    \n\n    constructor(width: number, height: number) {\n        super();\n        this.width = width;\n        this.height = height;\n        this.initGrid();\n        this.addChild(this.roadSprite);\n        this.roadSprite.pos(0, 0);\n        this.addChild(this.highLightRoadSprite);\n        this.highLightRoadSprite.pos(0, 0);\n        this.addChild(this.buildingSprite);\n        this.buildingSprite.pos(0, 0);\n\n    }\n\n    initGrid(rowHeight = 40, columnWidth = 40) {\n        this.gridColumnWidth = columnWidth;\n        this.gridRowHeight = rowHeight;\n        this.gridRows = Math.floor(this.height / this.gridRowHeight);\n        this.gridColumns = Math.floor(this.width / this.gridColumnWidth);\n    }\n\n    generate(): void {\n        // 1. \u521D\u59CB\u5316\u6570\u636E\n        this.mapInfo = new MapAction();\n        this.initMap();\n        // 2. \u7ED8\u5236\u5730\u56FE\n        this.drawMap();\n    }\n\n    initMap(): void {\n        // 1. \u9500\u6BC1\u5386\u53F2sprite\n        for (let source in this.buildingMapper) {\n            this.buildingMapper[source].sprite?.destroy(true);\n            this.buildingMapper[source].sprite = null;\n        }\n        // 2. \u521D\u59CB\u5316\u5730\u56FE\u6570\u636E\n        const { point: building, map: relation } = this.mapInfo;\n        this.buildingMapper = {};\n        this.map = [];\n        for (let i = 0; i < this.gridRows; i++) {\n            this.map.push(new Array(this.gridColumns).fill(null));\n        }\n        // 3. \u786E\u5B9Abuilding\u4F4D\u7F6E\uFF0C\u5C3D\u53EF\u80FD\u5145\u6EE1\u5730\u56FE(\u968F\u673A\u6027)\n        const firstBuilding = { id: 0, x: 0, y: 0 }\n        this.map[0][0] = firstBuilding;\n        this.buildingMapper[firstBuilding.id] = firstBuilding;\n\n        let nextX = 2;\n        for (let column = 1; column < building.length; column++) {\n            const curX = this.getRandom(nextX, this.gridColumns - (building.length - column - 1) * 2 - 1);\n\n            let nextY = 0;\n            for (let row = 0; row < building[column].length; row++) {\n                const curY = this.getRandom(nextY, this.gridRows - (building[column].length - row - 1) * 2 - 1);\n                const curBuilding = { id: building[column][row], x: curX, y: curY };\n                this.map[curY][curX] = curBuilding;\n                this.buildingMapper[curBuilding.id] = curBuilding;\n                nextY = curY + 2;\n            }\n            nextX = curX + 2;\n        }\n        // 4. \u786E\u5B9Aroad\u7ECF\u8FC7\u8282\u70B9\uFF0C\u786E\u4FDD\u8DEF\u5F84\u77ED\uFF0C\u62D0\u5F2F\u5C11\n        for (let source in relation) {\n            for (let target in relation[source]) {\n                if (!this.buildingMapper[source]) {\n                    continue;\n                }\n                if (!this.buildingMapper[source].targets) {\n                    this.buildingMapper[source].targets = {};\n                }\n                const points = this.getRoadPoints(this.buildingMapper[source], this.buildingMapper[target]);\n                if (points.length) {\n                    this.buildingMapper[source].targets[target] = {\n                        cost: parseInt(relation[source][target]),\n                        points\n                    };\n                }\n            }\n        }\n        console.log(this.map)\n    }\n\n    drawMap() {\n        this.drawGround();\n        this.drawRoads();\n        this.drawBuildings();\n    }\n\n    drawGround() {\n        // \u6E05\u9664\u5386\u53F2\u75D5\u8FF9\n        this.graphics.clear();\n        // \u7EB9\u7406\u7ED8\u5236\n        const groundTexture: Texture = Texture.create(Laya.loader.getRes(\"resources/tmw_desert_spacing.png\"), 5 * 33 + 1, 3 * 33 + 1, 30, 30);\n        this.graphics.fillTexture(groundTexture, 0, 0, this.width, this.height);\n    }\n\n    drawRoads() {\n        // \u6E05\u9664\u5386\u53F2\u75D5\u8FF9\n        this.roadSprite.graphics.clear();\n        // \u8DEF\u5F84\u7ED8\u5236\n        for (let source in this.buildingMapper) {\n            for (let target in this.buildingMapper[source].targets) {\n                const { points } = this.buildingMapper[source].targets[target];\n                this.drawRoad(this.roadSprite, this.buildingMapper[source].targets[target]);\n            }\n        }\n    }\n\n    drawRoad(sprite: Laya.Sprite, { points }: IRoad, color: any = 'black', width: number = 1) {\n        sprite.graphics.drawLines(\n            this.getXPos(points[0].x, 'center'),\n            this.getYPos(points[0].y, 'center'),\n            points.map(point => [this.getXPos(point.x - points[0].x), this.getYPos(point.y - points[0].y)]).flat(),\n            color,\n            width\n        );\n    }\n\n    drawBuildings() {\n        // \u6E05\u9664\u5386\u53F2\u75D5\u8FF9\n        this.buildingSprite.graphics.clear();\n        this.buildingSprite.destroyChildren();\n        // \u5EFA\u7B51\u7269\u7ED8\u5236\n        const houseTexture: Texture = Texture.create(Laya.loader.getRes(\"resources/map/house.png\"), 0, 0, 280, 280);\n        for (let y = 0; y < this.map.length; y++) {\n            for (let x = 0; x < this.map[y].length; x++) {\n                if (this.map[y][x]?.id !== undefined) {\n                    const building = new Building();\n                    building.size(this.gridColumnWidth, this.gridRowHeight);\n                    building.pos(this.getXPos(x), this.getYPos(y));\n                    this.buildingSprite.addChild(building);\n                    this.map[y][x].sprite = building;\n                }\n            }\n        }\n    }\n\n    highLightRoads(id: number | string) {\n        // \u6E05\u9664\u5386\u53F2\u75D5\u8FF9\n        this.highLightRoadSprite.graphics.clear();\n        const building = this.buildingMapper[id];\n        if (!building?.targets) {\n            return;\n        }\n        for (let target in building.targets) {\n            this.drawRoad(this.highLightRoadSprite, building.targets[target], 'black', 5);\n        }\n    }\n\n    calcPointValue(start: IPos, end: IPos): number {\n        return Math.abs(start.x - end.x) + Math.abs(start.y - end.y);\n    }\n\n    getRoadPoints(start: IBuilding, end: IBuilding): IRoadPoint[] {\n        if (!start || !end) {\n            return [];\n        }\n        const directions = [[0, 1], [1, 0], [0, -1], [-1, 0]];\n        // \u8DEF\u5F84\u987A\u5E8F\n        const queue: IRoadPoint[][] = [[{ ...start, turn: 0 }]];\n        // \u8BBF\u95EE\u8FC7\u7684\u4F4D\u7F6E\n        const visited = new Set();\n        visited.add(`${start.x}-${start.y}`);\n        // \u5F80\u4E0B\u67E5\u627E\n        while (queue.length) {\n            // 1. \u5BFB\u627E\u4E0B\u4E00\u4E2A\u70B9\n            const curPoints = queue[0];\n            const [curPoint] = curPoints;\n            \n            let isEnd = false;\n            const nextPoints = [];\n            for (let i = 0; i < directions.length; i++) {\n                const nextPoint: IRoadPoint = {\n                    x: curPoint.x + directions[i][0],\n                    y: curPoint.y + directions[i][1],\n                    turn: curPoint.turn || 0\n                };\n                // 1. \u5224\u65AD\u8282\u70B9\u662F\u5426\u4E3A\u7EC8\u70B9\n                if (nextPoint.x === end.x && nextPoint.y === end.y) {\n                    isEnd = true;\n                    queue.unshift([end]);\n                    break;\n                }\n                // 2. \u5224\u65AD\u8282\u70B9\u662F\u5426\u6709\u6548\n                if (nextPoint.x < 0 || nextPoint.y < 0 ||\n                    nextPoint.x >= this.gridColumns || nextPoint.y >= this.gridRows ||\n                    this.map[nextPoint.y][nextPoint.x] !== null ||\n                    visited.has(`${nextPoint.x}-${nextPoint.y}`)) {\n                    continue;\n                }\n                // 3. \u5224\u65AD\u8282\u70B9\u662F\u5426\u62D0\u5F2F\n                if (queue[1]) {\n                    const [prevPoint] = queue[1];\n                    if (new Set([prevPoint.x, curPoint.x, nextPoint.x]).size !== 1 &&\n                        new Set([prevPoint.y, curPoint.y, nextPoint.y]).size !== 1) {\n                        nextPoint.turn++;\n                        nextPoint.isTurn = true;\n                    }\n                }\n                // 4. \u8BA1\u7B97\u8282\u70B9\u7684cost\n                nextPoint.value = this.calcPointValue(start, nextPoint) + this.calcPointValue(end, nextPoint);\n                nextPoints.push(nextPoint);\n            }\n            if (isEnd) {\n                break;\n            }\n            if (nextPoints.length) {\n                nextPoints.sort((a, b) => a.value === b.value ? a.turn - b.turn : a.value - b.value);\n                queue.unshift(nextPoints);\n                visited.add(`${nextPoints[0].x}-${nextPoints[0].y}`)\n                continue;\n            }\n            // 2. \u56DE\u5230\u4E0A\u4E00\u4E2A\u8282\u70B9\n            while (queue.length) {\n                // 1. \u79FB\u9664\u7B2C\u4E00\u4E2A\u8282\u70B9\n                queue[0].shift();\n                // 2. \u5982\u679C\u975E\u7A7A\uFF0C\u7EE7\u7EED\u5F80\u4E0B\n                if (queue[0].length) {\n                    const [curPoint] = queue[0];\n                    visited.add(`${curPoint.x}-${curPoint.y}`);\n                    break;\n                }\n                // 3. \u4E3A\u7A7A\uFF0C\u5220\u6389\u8282\u70B9\n                queue.shift();\n            }\n        }\n        if (!queue.length) {\n            return [];\n        }\n        return queue.reverse().map(points => points[0]);\n    }\n\n    getRandom(n: number, m: number): number {\n        return Math.floor(Math.random() * (m - n + 1) + n);\n    }\n\n    getXPos(x: number, placement?: 'center') {\n        if (placement === 'center') {\n            return (x + 0.5) * this.gridColumnWidth;\n        }\n        return x * this.gridColumnWidth;\n    }\n\n    getYPos(y: number, placement?: 'center') {\n        if (placement === 'center') {\n            return (y + 0.5) * this.gridRowHeight;\n        }\n        return y * this.gridRowHeight;\n    }\n}", "import { IndexBase } from \"./Index.generated\";\nimport { MapPanel } from \"./ui/MapPanel\";\nimport Event = Laya.Event;\n\nconst { regClass, property } = Laya;\n\n@regClass('f0297df7-2262-4d82-afb2-2d0f83a1613b', '../src/Index.ts')\nexport class Index extends IndexBase {\n    //declare owner : Laya.Sprite3D;\n    private map: MapPanel;\n    \n    constructor() {\n        super();\n    }\n\n    /**\n     * \u7EC4\u4EF6\u88AB\u6FC0\u6D3B\u540E\u6267\u884C\uFF0C\u6B64\u65F6\u6240\u6709\u8282\u70B9\u548C\u7EC4\u4EF6\u5747\u5DF2\u521B\u5EFA\u5B8C\u6BD5\uFF0C\u6B64\u65B9\u6CD5\u53EA\u6267\u884C\u4E00\u6B21\n     */\n    //onAwake(): void {}\n\n    /**\n     * \u7EC4\u4EF6\u88AB\u542F\u7528\u540E\u6267\u884C\uFF0C\u4F8B\u5982\u8282\u70B9\u88AB\u6DFB\u52A0\u5230\u821E\u53F0\u540E\n     */\n    onEnable(): void {\n        // 1. \u521D\u59CB\u5316\u5730\u56FE\n        this.map = new MapPanel(1136, 640);\n        this.map.generate();\n        this.addChild(this.map);\n        // 2. \u9F20\u6807\u4EA4\u4E92\n        for (let id in this.map.buildingMapper) {\n            this.map.buildingMapper[id].sprite.on(Event.CLICK, () => {\n                this.map.highLightRoads(id);\n            })\n        }\n    }\n\n    /**\n     * \u7EC4\u4EF6\u88AB\u7981\u7528\u65F6\u6267\u884C\uFF0C\u4F8B\u5982\u4ECE\u8282\u70B9\u4ECE\u821E\u53F0\u79FB\u9664\u540E\n     */\n    //onDisable(): void {}\n\n    /**\n     * \u7B2C\u4E00\u6B21\u6267\u884Cupdate\u4E4B\u524D\u6267\u884C\uFF0C\u53EA\u4F1A\u6267\u884C\u4E00\u6B21\n     */\n    //onStart(): void {}\n\n    /**\n     * \u624B\u52A8\u8C03\u7528\u8282\u70B9\u9500\u6BC1\u65F6\u6267\u884C\n     */\n    //onDestroy(): void {\n\n    /**\n     * \u6BCF\u5E27\u66F4\u65B0\u65F6\u6267\u884C\uFF0C\u5C3D\u91CF\u4E0D\u8981\u5728\u8FD9\u91CC\u5199\u5927\u5FAA\u73AF\u903B\u8F91\u6216\u8005\u4F7F\u7528getComponent\u65B9\u6CD5\n     */\n    //onUpdate(): void {}\n\n    /**\n     * \u6BCF\u5E27\u66F4\u65B0\u65F6\u6267\u884C\uFF0C\u5728update\u4E4B\u540E\u6267\u884C\uFF0C\u5C3D\u91CF\u4E0D\u8981\u5728\u8FD9\u91CC\u5199\u5927\u5FAA\u73AF\u903B\u8F91\u6216\u8005\u4F7F\u7528getComponent\u65B9\u6CD5\n     */\n    //onLateUpdate(): void {}\n\n    /**\n     * \u9F20\u6807\u70B9\u51FB\u540E\u6267\u884C\u3002\u4E0E\u4EA4\u4E92\u76F8\u5173\u7684\u8FD8\u6709onMouseDown\u7B49\u5341\u591A\u4E2A\u51FD\u6570\uFF0C\u5177\u4F53\u8BF7\u53C2\u9605\u6587\u6863\u3002\n     */\n    //onMouseClick(): void {}\n}", "/**This class is automatically generated by LayaAirIDE, please do not make any modifications. */\n\n\n/**\n * Loading.ls\n */\nexport class LoadingBase extends Laya.Scene {\n    public progress: Laya.ProgressBar;\n}\n\n", "const { regClass } = Laya;\nimport { LoadingBase } from \"./Loading.generated\";\n\nconst resources = [\n    \"resources/tmw_desert_spacing.png\",\n    \"resources/map/house.png\"\n];\n\n@regClass('ce1c8aad-836c-4269-88cd-2c0a2d843f4d', '../src/Loading.ts')\nexport class Loading extends LoadingBase {\n    onAwake(): void {\n        Laya.loader.load(\n            //\u52A0\u8F7D\u9996\u5C4F\u56FE\u7247\n            [\n                \"atlas/comp/progress.png\",\n                \"atlas/comp/progress$bar.png\"\n            ]\n        ).then(() => {\n            Laya.loader.load(resources, null, Laya.Handler.create(this, this.onLoading, null, false)).then(() => {\n                // \u52A0\u8F7D\u5B8C\u6210\u540E\uFF0C\u5904\u7406\u903B\u8F91\n                this.progress.value = 0.98;\n                //\u9884\u52A0\u8F7D\u7684\u4E1C\u897F\u592A\u5C11\uFF0C\u4E3A\u4E86\u672C\u5730\u770B\u6548\u679C\u5EF6\u8FDF\u4E00\u79D2\uFF0C\u771F\u5B9E\u9879\u76EE\u4E0D\u9700\u8981\u5EF6\u8FDF\n                Laya.timer.once(1000, this, () => {\n                    //\u8DF3\u8F6C\u5230\u5165\u53E3\u573A\u666F\n                    Laya.Scene.open(\"scenes/Index.ls\"); //\u4E0D\u8981\u4F7F\u7528Laya.Scene.open(\"./Scenes/Index.ls\");\n                });\n            });\n            // \u4FA6\u542C\u52A0\u8F7D\u5931\u8D25\n            Laya.loader.on(Laya.Event.ERROR, this, this.onError);\n        });\n    }\n\n    /**\n   * \u5F53\u62A5\u9519\u65F6\u6253\u5370\u9519\u8BEF\n   * @param err \u62A5\u9519\u4FE1\u606F\n   */\n    onError(err: string): void {\n        console.log(\"\u52A0\u8F7D\u5931\u8D25: \" + err);\n    }\n\n    /**\n     * \u52A0\u8F7D\u65F6\u4FA6\u542C\n     */\n    onLoading(progress: number): void {\n        //\u63A5\u8FD1\u5B8C\u6210\u52A0\u8F7D\u65F6\uFF0C\u8BA9\u663E\u793A\u8FDB\u5EA6\u6BD4\u5B9E\u9645\u8FDB\u5EA6\u6162\u4E00\u70B9\uFF0C\u8FD9\u662F\u4E3A\u6253\u5F00\u573A\u666F\u65F6\u7684\u81EA\u52A8\u52A0\u8F7D\u9884\u7559\uFF0C\u5C24\u5176\u662F\u8981\u6253\u5F00\u7684\u573A\u666F\u8D44\u6E90\u591A\uFF0C\u5E76\u6CA1\u6709\u5B8C\u5168\u653E\u5230\u9884\u52A0\u8F7D\u4E2D\uFF0C\u8FD8\u9700\u8981\u518D\u81EA\u52A8\u52A0\u8F7D\u4E00\u90E8\u5206\u65F6\u3002\n        if (progress > 0.92) this.progress.value = 0.95;\n        else this.progress.value = progress;\n    }\n}", "/**This class is automatically generated by LayaAirIDE, please do not make any modifications. */\n\n\n/**\n * scenes/Index.ls\n */\nexport class MapUiBase extends Laya.Scene {\n    public bg: Laya.Panel;\n}\n\n", "import { MapUiBase } from \"./MapUi.generated\";\nimport { mapBuilder } from \"../ui/MapBuilder\";\nimport Utils = Laya.Utils;\nimport Sprite = Laya.Sprite;\nimport Texture = Laya.Texture;\n\nconst { regClass, property } = Laya;\n\ninterface IMapPoint {\n    type?: 'road' | 'house';\n    id?: number;\n}\n\nconst WIDTH = 1136;\nconst HEIGHT = 640;\n\n// \u5BBD\u5EA6\u5355\u4F4D\u957F\u5EA6\nconst GRID_UNIT_W = 40;\n// \u9AD8\u5EA6\u5355\u4F4D\u957F\u5EA6\nconst GRID_UNIT_H = 40;\n\n// \u7F51\u683C\u5BBD\u5EA6\nconst GRID_UNIT_W_NUM = Math.floor(WIDTH / GRID_UNIT_W);\n// \u7F51\u683C\u9AD8\u5EA6\nconst GRID_UNIT_H_NUM = Math.floor(HEIGHT / GRID_UNIT_H);\n\nfunction getRandom(n: number, m: number): number {\n    return Math.floor(Math.random() * (m - n + 1) + n);\n}\n\n@regClass('111dc0ae-4a43-4f82-8004-289f668e79f3', '../src/draft/MapUi.ts')\nexport class Script extends MapUiBase {\n    //declare owner : Laya.Sprite3D;\n    private building: Sprite;\n\n    // \u5730\u56FE\u6570\u636E\n    public map: Array<IMapPoint[]> = []; // 1-\u8868\u793A\u9053\u8DEF\uFF0C2-\u8868\u793A\u623F\u5B50\n    public idToMap: Record<number, [number, number]> = {};\n    public mapPoint: Array<number[]> = [];\n    public mapRelation: Record<number, Record<number, number>> = {};\n\n    constructor() {\n        super();\n    }\n\n    /**\n     * \u7EC4\u4EF6\u88AB\u6FC0\u6D3B\u540E\u6267\u884C\uFF0C\u6B64\u65F6\u6240\u6709\u8282\u70B9\u548C\u7EC4\u4EF6\u5747\u5DF2\u521B\u5EFA\u5B8C\u6BD5\uFF0C\u6B64\u65B9\u6CD5\u53EA\u6267\u884C\u4E00\u6B21\n     */\n    // onAwake(): void { }\n\n    onEnable(): void {\n        Laya.init(WIDTH, HEIGHT, Laya.WebGL);\n\n        console.log('Build Map UI!');\n        const { point, map } = mapBuilder();\n        this.mapPoint = point;\n        this.mapRelation = map;\n\n        // \u8BA1\u7B97\u623F\u5C4B\u548C\u8DEF\u5F84\u7684\u4F4D\u7F6E\n        // 1. \u521D\u59CB\u5316\u5730\u56FE\u6570\u636E\n        this.map = [];\n        for (let i = 0; i < GRID_UNIT_H_NUM; i++) {\n            this.map.push(new Array(GRID_UNIT_W_NUM).fill(null));\n        }\n        // 2. \u653E\u7F6E\u623F\u5B50\u4F4D\u7F6E\uFF1A\u6BCF\u4E2A\u623F\u5B50\u5468\u56F4\u90FD\u5FC5\u987B\u4E3A\u7A7A\n        this.map[0][0] = { type: 'house', id: 0 };\n        this.idToMap[0] = [0, 0];\n        let nextY = 2;\n        for (let i = 1; i < point.length; i++) {\n            const curY = getRandom(nextY, GRID_UNIT_W_NUM - (point.length - i - 1) * 2 - 1);\n            nextY = curY + 2;\n\n            let nextX = 0;\n            for (let j = 0; j < point[i].length; j++) {\n                const curX = getRandom(nextX, GRID_UNIT_H_NUM - (point[i].length - j - 1) * 2 - 1);\n                nextX = curX + 2;\n                this.map[curX][curY] = { type: 'house', id: point[i][j] };\n                this.idToMap[point[i][j]] = [curX, curY];\n            }\n        }\n        // 3. \u4ECE\u6BCF\u4E2A\u623F\u5B50\u627E\u8DEF\u5F84\uFF1A\u6700\u77ED\u8DEF\u5F84\u67E5\u627E\n        for (let source in map) {\n            for (let target in map[source]) {\n                this.PaveRoad(parseInt(source), parseInt(target));\n            }\n        }\n        // this.PaveRoad(0, 1);\n        this.onLoaded();\n    }\n\n    // \u67E5\u627E\u6709\u6548\u8DEF\u5F84\n    PaveRoad(source: number, target: number) {\n        const [startX, startY] = this.idToMap[source];\n        const visited = new Set();\n        visited.add(`${startX}-${startY}`);\n\n        // \u6DF1\u5EA6\u4F18\u5148\u7B97\u6CD5\n        const queue = [[this.idToMap[source]]];\n\n        while (queue.length) {\n            const parentPoints = queue[queue.length - 1];\n            const [[x, y]] = parentPoints;\n\n            const nextPointInfos: { point: [number, number]; distance: number; }[] = [];\n            const points: Array<[number, number]> = [[x + 1, y], [x - 1, y], [x, y + 1], [x, y - 1]];\n            // 1.\u68C0\u67E5\u662F\u5426\u5B58\u5728\u7EC8\u70B9   \n            if (points.some((point) => this.isSame(point, this.idToMap[target]))) {\n                break;\n            }\n            // 2. \u83B7\u53D6\u6709\u6548\u8282\u70B9\n            points.forEach((point) => {\n                if (!this.isValidPoint(point[0], point[1]) || visited.has(`${point[0]}-${point[1]}`)) {\n                    return;\n                }\n                nextPointInfos.push({\n                    point,\n                    distance: this.cost(point, this.idToMap[source]) + this.cost(point, this.idToMap[target])\n                })\n                visited.add(`${point[0]}-${point[1]}`);\n            })\n            nextPointInfos.sort((a, b) => a.distance - b.distance || this.distance(a.point, this.idToMap[target]) - this.distance(b.point, this.idToMap[target]));\n            if (!nextPointInfos.length) {\n                parentPoints.shift();\n                if (!parentPoints.length) {\n                    queue.pop();\n                }\n            } else {\n                queue.push(nextPointInfos.map((data) => data.point));\n            }\n        }\n        if (!queue.length) {\n            return;\n        }\n        for (let i = 1; i < queue.length; i++) {\n            const [[x, y]] = queue[i];\n            this.map[x][y] = { type: 'road' };\n        }\n    }\n\n    isSame(cur: number[], node: number[]): boolean {\n        return cur[0] === node[0] && cur[1] === node[1];\n    }\n\n    cost(cur: number[], node: number[]): number {\n        const a = cur[0] - node[0], b = cur[1] - node[1];\n        return Math.abs(a) + Math.abs(b);\n    }\n\n    distance(cur: number[], node: number[]): number {\n        const a = cur[0] - node[0], b = cur[1] - node[1];\n        return Math.sqrt(a * a + b * b);\n    }\n\n    isValidPoint(x: number, y: number) {\n        if (x < 0 || y < 0) {\n            return false;\n        }\n        if (x >= GRID_UNIT_H_NUM || y >= GRID_UNIT_W_NUM) {\n            return false;\n        }\n        if (this.map[x][y]?.type === 'house') {\n            return false;\n        }\n        return true;\n    }\n\n    /**\n     * \u7EC4\u4EF6\u88AB\u542F\u7528\u540E\u6267\u884C\uFF0C\u4F8B\u5982\u8282\u70B9\u88AB\u6DFB\u52A0\u5230\u821E\u53F0\u540E\n     */\n    onLoaded(): void {\n        // \u7ED8\u5236\u7B2C\u4E00\u5C42\uFF1A\u5730\u9762\u7EB9\u7406\n        const groundTexture: Texture = Texture.create(Laya.loader.getRes(\"resources/tmw_desert_spacing.png\"), 5 * 33 + 1, 3 * 33 + 1, 30, 30);\n        // const groundTexture: Texture = Texture.create(Laya.loader.getRes(\"resources/tmw_desert_spacing.png\"), 0, 0, GRID_UNIT_W, GRID_UNIT_H);\n        this.bg.graphics.fillTexture(groundTexture, 0, 0, WIDTH, HEIGHT);\n\n        // \u7ED8\u5236\u7B2C\u4E8C\u5C42\uFF1A\u623F\u5C4B&road\n        this.building = new Laya.Sprite();\n        this.bg.addChild(this.building);\n\n        // for (let source in this.mapRelation) {\n        //     for (let target in this.mapRelation[source]) {\n        //         const start = this.idToMap[source];\n        //         const end = this.idToMap[target];\n        //         this.building.graphics.drawLine((start[1] + 0.5) * GRID_UNIT_W, (start[0] + 0.5) * GRID_UNIT_H, (end[1] + 0.5) * GRID_UNIT_W, (end[0] + 0.5) * GRID_UNIT_H, 'black');\n        //     }\n        // }\n        // \u83B7\u53D6house\u7EB9\u7406\n        const houseTexture: Texture = Texture.create(Laya.loader.getRes(\"resources/map/house.png\"), 0, 0, 280, 280);\n        // \u83B7\u53D6road\u7EB9\u7406\n        const roadTexture: Texture = Texture.create(Laya.loader.getRes(\"resources/tmw_desert_spacing.png\"), 1 * 33 + 1, 4 * 33 + 1, 30, 30);\n        for (let y = 0; y < this.map.length; y++) {\n            for (let x = 0; x < this.map[y].length; x++) {\n                if (this.map[y][x]?.type === 'house') {\n                    this.building.graphics.drawTexture(houseTexture, x * GRID_UNIT_W, y * GRID_UNIT_H, GRID_UNIT_W, GRID_UNIT_H);\n                }\n                else if (this.map[y][x]?.type === 'road') {\n                    this.building.graphics.fillTexture(roadTexture, x * GRID_UNIT_W, y * GRID_UNIT_H, GRID_UNIT_W, GRID_UNIT_H);\n                }\n            }\n        }\n        this.building.pos(0, 0);\n    }\n\n    /**\n     * \u7EC4\u4EF6\u88AB\u7981\u7528\u65F6\u6267\u884C\uFF0C\u4F8B\u5982\u4ECE\u8282\u70B9\u4ECE\u821E\u53F0\u79FB\u9664\u540E\n     */\n    //onDisable(): void {}\n\n    /**\n     * \u7B2C\u4E00\u6B21\u6267\u884Cupdate\u4E4B\u524D\u6267\u884C\uFF0C\u53EA\u4F1A\u6267\u884C\u4E00\u6B21\n     */\n    // onStart(): void { }\n\n    /**\n     * \u624B\u52A8\u8C03\u7528\u8282\u70B9\u9500\u6BC1\u65F6\u6267\u884C\n     */\n    //onDestroy(): void {\n\n    /**\n     * \u6BCF\u5E27\u66F4\u65B0\u65F6\u6267\u884C\uFF0C\u5C3D\u91CF\u4E0D\u8981\u5728\u8FD9\u91CC\u5199\u5927\u5FAA\u73AF\u903B\u8F91\u6216\u8005\u4F7F\u7528getComponent\u65B9\u6CD5\n     */\n    //onUpdate(): void {}\n\n    /**\n     * \u6BCF\u5E27\u66F4\u65B0\u65F6\u6267\u884C\uFF0C\u5728update\u4E4B\u540E\u6267\u884C\uFF0C\u5C3D\u91CF\u4E0D\u8981\u5728\u8FD9\u91CC\u5199\u5927\u5FAA\u73AF\u903B\u8F91\u6216\u8005\u4F7F\u7528getComponent\u65B9\u6CD5\n     */\n    //onLateUpdate(): void {}\n\n    /**\n     * \u9F20\u6807\u70B9\u51FB\u540E\u6267\u884C\u3002\u4E0E\u4EA4\u4E92\u76F8\u5173\u7684\u8FD8\u6709onMouseDown\u7B49\u5341\u591A\u4E2A\u51FD\u6570\uFF0C\u5177\u4F53\u8BF7\u53C2\u9605\u6587\u6863\u3002\n     */\n    //onMouseClick(): void {}\n}"],
  "mappings": "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",
  "names": ["start", "Texture", "regClass", "property", "curPoint", "regClass", "property", "regClass", "Texture", "regClass", "property"]
}
